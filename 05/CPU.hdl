// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:


    //if it's a C instruction - send the correct bits everywhere
    // if it's an A instruction - negate everything - since we just need to send this to the A register

    // ****** how can we set writeM to controlBits[4]? **********
    And16(a=instruction[15], b=instruction, out=controlBits, out[4]=writeM);

    // So that the Mux takes the right instruction to pass forward
    // we pass it the negated MSB of the current instruction
    Not(in=instruction[15], out=negatedMSB);

    //we feed the first MUX the instruction and the and the output of the ALU 
    Mux16(a=outM ,b=instruction ,sel=negatedMSB ,out=ARegIn);

    // the A register is fed directly from MUX
    // whether the register will be "open for business" depends on the MSB of the dest bits of the c instruction
    ARegister(in=ARegIn ,load=controlBits[5] ,out=ARegOut);

    //this MUX decides whether we take the input of the A register or 
    // the M register based on the "a" bit of the C instruction
    Mux16(a=ARegOut ,b=inM ,sel=controlBits[12] ,out=AorMvalue);

    // whether we load the D register or not depends on the LSB bit of the dest bits of the C instruction
    DRegister(in=outM ,load=controlBits[3] ,out=DRegOut);

    // we feed the ALU the outputs of the D and A | M registers and the control bits of the C instruction
    ALU(x=DRegOut ,y=AorMvalue ,zx=controlBits[11] ,nx=controlBits[10] ,zy=controlBits[9] ,ny=controlBits[8] ,f=controlBits[7] ,no=controlBits[6] ,out=outM ,zr=zrOut,ng=ngOut);

    //we compare the output of the ALU against the jump bits of the instruction and if at least one of them matches - then the load bit of PC is 1
    And(a=instruction[2], b=ngOut, out=firstJMPbitCompare);
    And(a=instruction[1], b=zrOut, out=secondJMPbitCompare);

    //if ngOut == 0 and zrOut == 0 then ALU output is positive
    Or(a=ngOut,b=zrOut,out=isNegativeOrZero);
    Not(in=isNegativeOrZero,out=isALUoutPositive);

    And(a=instruction[0], b=isALUoutPositive, out=thirdJMPbitCompare);

    Or(a=firstJMPbitCompare, b=secondJMPbitCompare, out=firstJmpComparisonResult);
    Or(a=firstJmpComparisonResult, b=thirdJMPbitCompare, out=shouldLoadPC);

    //if load == 1 then PC == A, else increment counter
    Not(in=shouldLoadPC, out=shouldIncPC);

    //the load bit and the inc bit comes from the output of the ALU and the JMP logic
    PC(in=ARegOut ,load=shouldLoadPC ,inc=shouldIncPC ,reset=reset ,out=pc);
}